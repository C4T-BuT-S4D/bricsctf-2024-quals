#!/usr/bin/env python3

import os
import sys


# def memfrob(data: bytes) -> bytes:
#     tmp = 0xFF
#     result = []

#     for i, byte in enumerate(data):
#         byte = (byte ^ tmp) & 0xFF

#         byte = (byte ^ (i)) & 0xFF
#         byte = (byte + (i*i)) & 0xFF
#         byte = (byte ^ (i*i*i)) & 0xFF
#         byte = (byte + (i*i*i*i)) & 0xFF

#         result.append(byte)

#         tmp = (tmp + byte) & 0xFF

#     return bytes(result)


# def unmemfrob(data: bytes) -> bytes:
#     tmp = 0xFF
#     tmp = (tmp + sum(data)) & 0xFF

#     unprotected = []

#     for i, byte in reversed(list(enumerate(data))):
#         tmp = (tmp - byte) & 0xFF

#         byte = (byte - (i*i*i*i)) & 0xFF
#         byte = (byte ^ (i*i*i)) & 0xFF
#         byte = (byte - (i*i)) & 0xFF
#         byte = (byte ^ (i)) & 0xFF

#         byte = (byte ^ tmp) & 0xFF

#         unprotected.append(byte)

#     return bytes(unprotected[::-1])


def memfrob(data: bytes) -> bytes:
    return bytes(x ^ 0xAA for x in data)


def unmemfrob(data: bytes) -> bytes:
    return memfrob(data)


def generate_array(
        file_path: str,
        array_name: str,
        output_path: str,
) -> None:
    print(
        f'generate {array_name} from {file_path} to {output_path}',
    )

    with open(file_path, 'rb') as file:
        content = file.read()

    length = len(content)
    content = unmemfrob(content)

    template = '''/* DO NOT EDIT: autogenerated */
__attribute__((aligned(0x10000)))
__attribute__((section(".data")))
unsigned char {name}[] = {{
    {array}
}};

const unsigned long long {name}Length = {length};
'''

    array = ','.join(
        '0x' + hex(byte)[2:] for byte in content
    )

    result = template.format(
        name = array_name,
        array = array,
        length = length,
    )

    with open(output_path, 'w') as file:
        file.write(result)

    return


def generate_jre() -> None:
    # generate JRE runtime libraries

    generate_array(
        file_path = '../jre/lib/libjava.so',
        array_name = 'LibJava',
        output_path = './libjava_array.c',
    )

    generate_array(
        file_path = '../jre/lib/libverify.so',
        array_name = 'LibVerify',
        output_path = './libverify_array.c',
    )

    generate_array(
        file_path = '../jre/lib/libjimage.so',
        array_name = 'LibJimage',
        output_path = './libjimage_array.c',
    )

    generate_array(
        file_path = '../jre/lib/libnet.so',
        array_name = 'LibNet',
        output_path = './libnet_array.c',
    )

    generate_array(
        file_path = '../jre/lib/libnio.so',
        array_name = 'LibNio',
        output_path = './libnio_array.c',
    )

    generate_array(
        file_path = '../jre/lib/libzip.so',
        array_name = 'LibZip',
        output_path = './libzip_array.c',
    )

    generate_array(
        file_path = '../jre/lib/modules',
        array_name = 'Modules',
        output_path = './modules_array.c',
    )

    generate_array(
        file_path = '../jre/lib/server/libjvm.so',
        array_name = 'LibJvm',
        output_path = './libjvm_array.c',
    )

    return


def generate_dollyclass() -> None:
    # generate Dolly.class

    generate_array(
        file_path = './Dolly.class',
        array_name = 'DollyClass',
        output_path = './dollyclass_array.c',
    )

    return


def main() -> None:
    if len(sys.argv) < 2:
        print(f'use `python3 {sys.argv[0]} JRE|DOLLYCLASS`')
        return

    arg = sys.argv[1]

    if arg == 'JRE':
        generate_jre()
    elif arg == 'DOLLYCLASS':
        generate_dollyclass()
    else:
        print(f'unknown arg: {arg}')

    return


if __name__ == '__main__':
    main()
